def pathLazor(board, grid, lazor, numlazors):
    newLazor = [0 for i in range(numlazors)]
    for n in range(numlazors):
        newLazor[n] = list(lazor[n])

    VALIDLAZOR = True
    VALIDOPAQUE = False
    directions = [
        (0, 1),
        (0, -1),
        (-1, 0),
        (1, 0)
    ]

    while len(newLazor) > 0:
        cell = newLazor[0]
        cellx = cell[0]
        celly = cell[1]
        removed = False
        if onBoard(cellx, celly, board):
            if board[celly][cellx] == 0:
                board[celly][cellx] = 1
            for a in range(len(directions)):
                neighborx = cellx + directions[a][0]
                neighbory = celly + directions[a][1]
                if onBoard(neighborx, neighbory, board) and isinstance(board[neighbory][neighborx], Block):
                    if board[neighbory][neighborx].blockType == 'Reflective':
                        if neighborx == cellx + cell[2]:
                            newLazor[0][2] *= -1
                        elif neighbory == celly + cell[3]:
                            newLazor[0][3] *= -1
                    elif board[neighbory][neighborx].blockType == 'Opaque':
                        if neighborx == cellx + cell[2] or neighbory == celly + cell[3]:
                            newLazor.remove(newLazor[0])
                            removed = True
                    elif board[neighbory][neighborx].blockType == 'Refractive':
                        if neighborx == cellx + cell[2]:
                            newLazor.append([cellx + newLazor[0][2], celly +
                                             newLazor[0][3], newLazor[0][2], newLazor[0][3]])
                            newLazor[0][2] *= -1
                        elif neighbory == celly + cell[3]:
                            newLazor.append([cellx + newLazor[0][2], celly +
                                             newLazor[0][3], newLazor[0][2], newLazor[0][3]])
                            newLazor[0][3] *= -1
            if not removed:
                newLazor[0] = [cellx + newLazor[0][2], celly +
                               newLazor[0][3], newLazor[0][2], newLazor[0][3]]
        else:
            newLazor.remove(newLazor[0])

    return board
# where the board is populated with '1' for lazors
