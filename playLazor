def playLazor(filename):
    """
    Read in file and compiles all relevant data for solver.

    Parameters
    ----------
    filename : str
        name of board file to be solved. should be a *.bff file.

    Returns
    -------
    list
        Returns: grid from the file as a list of characters in format board[y][x]
                 lazors as a list of lists in format [x,y,vx,vy]
                 target points as a list of lists in format [x,y]
                 blocks as a list in format [reflect, opaque, refract] 
                 numlazors as an integer value

    """
    import re
    points = []
    parsing = False
    numlazors = 0
    grid = []
    listed = []
    reflect = [0]
    refract = [0]
    opaque = [0]
    lazors = []
    file = open(filename, 'r')
    for lines in file:
        if lines.startswith('GRID START'):
            parsing = True
        if lines.startswith('GRID STOP'):
            parsing = False
        if parsing is True:
            if not lines.startswith('GRID'):
                F = lines.replace(" ", "")
                E = F.replace("\n", "")
                listed = []
                for i in range(len(E)):
                    listed.append(E[i])
                grid.append(listed)
        elif lines[0] == 'A':
            # moveable, used to solve
            reflect = [int(i) for i in lines.split() if i.isdigit()]
        elif lines[0] == 'B':
            # moveable, used to solve
            opaque = [int(i) for i in lines.split() if i.isdigit()]
        elif lines[0] == 'P':
            # for the intersection points
            values = [int(i) for i in lines.split() if i.isdigit()]
            points.append(values)
        elif lines[0] == 'L':
            # for the lazor sources
            values = [int(i) for i in re.findall(r'-?\d+', lines)]
            lazors.append(tuple(values))
            numlazors += 1
        elif lines[0] == 'C':
            # moveable, used to solve
            refract = [int(i) for i in lines.split() if i.isdigit()]

   # originalBoard = createGrid(grid, points, lazors)
    blocks = (reflect[0], opaque[0], refract[0])
    file.close()
    return [grid, lazors, points, blocks, numlazors]
